// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "email": "support@example.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/demo": {
            "post": {
                "description": "Demo endpoint for testing single document parsing with example response",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "demo"
                ],
                "summary": "Demo endpoint",
                "parameters": [
                    {
                        "description": "Document parsing request (same as /parse)",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.DocumentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully parsed document (demo)",
                        "schema": {
                            "$ref": "#/definitions/server.ParseResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Check the health status of the service including Modal API connectivity and queue status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "monitoring"
                ],
                "summary": "Health check",
                "responses": {
                    "200": {
                        "description": "Service is healthy",
                        "schema": {
                            "$ref": "#/definitions/server.HealthResponse"
                        }
                    },
                    "503": {
                        "description": "Service is degraded or unhealthy",
                        "schema": {
                            "$ref": "#/definitions/server.HealthResponse"
                        }
                    }
                }
            }
        },
        "/metrics": {
            "get": {
                "description": "Get Prometheus-compatible metrics (placeholder implementation)",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "monitoring"
                ],
                "summary": "Metrics",
                "responses": {
                    "200": {
                        "description": "Prometheus metrics format",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/parse": {
            "post": {
                "description": "Parse a document image using OCR and layout analysis. Supports JPEG and PNG formats up to 50MB.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "document"
                ],
                "summary": "Parse document",
                "parameters": [
                    {
                        "description": "Document parsing request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.DocumentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully parsed document",
                        "schema": {
                            "$ref": "#/definitions/server.ParseResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or unsupported image",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "408": {
                        "description": "Processing timeout",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "413": {
                        "description": "Image too large (\u003e50MB)",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal processing error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "503": {
                        "description": "Service at capacity",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/queue/status": {
            "get": {
                "description": "Get detailed information about the current queue status and estimated wait times",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "monitoring"
                ],
                "summary": "Queue status",
                "responses": {
                    "200": {
                        "description": "Queue status information",
                        "schema": {
                            "$ref": "#/definitions/server.QueueStatusResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "server.DocumentRequest": {
            "type": "object",
            "required": [
                "image_data"
            ],
            "properties": {
                "filename": {
                    "description": "Optional filename for the document",
                    "type": "string",
                    "example": "document.jpg"
                },
                "image_data": {
                    "description": "Base64 encoded image data (JPEG/PNG)",
                    "type": "string",
                    "format": "base64",
                    "example": "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNk+M9QDwADhgGAWjR9awAAAABJRU5ErkJggg=="
                }
            }
        },
        "server.Element": {
            "type": "object",
            "properties": {
                "bbox": {
                    "description": "Bounding box [x1, y1, x2, y2]",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "example": [
                        100,
                        200,
                        400,
                        300
                    ]
                },
                "label": {
                    "description": "Element type",
                    "type": "string",
                    "enum": [
                        "title",
                        "para",
                        "table",
                        "figure",
                        "formula"
                    ],
                    "example": "title"
                },
                "reading_order": {
                    "description": "Sequential reading order",
                    "type": "integer",
                    "example": 1
                },
                "text": {
                    "description": "Extracted text content",
                    "type": "string",
                    "example": "Document Title"
                }
            }
        },
        "server.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid request format"
                }
            }
        },
        "server.HealthResponse": {
            "type": "object",
            "properties": {
                "modal_api_error": {
                    "type": "string",
                    "example": ""
                },
                "queue_depth": {
                    "type": "integer",
                    "example": 0
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "healthy",
                        "degraded",
                        "unhealthy"
                    ],
                    "example": "healthy"
                },
                "timestamp": {
                    "type": "string",
                    "example": "2025-09-17T14:30:00Z"
                },
                "worker_pool": {
                    "type": "object",
                    "additionalProperties": true
                }
            }
        },
        "server.ParseResponse": {
            "type": "object",
            "properties": {
                "batch_id": {
                    "type": "string",
                    "example": "batch_123"
                },
                "batch_index": {
                    "type": "integer",
                    "example": 0
                },
                "element_count": {
                    "type": "integer",
                    "example": 5
                },
                "elements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/server.Element"
                    }
                },
                "error": {
                    "type": "string",
                    "example": ""
                },
                "filename": {
                    "type": "string",
                    "example": "document.jpg"
                },
                "processing_time_seconds": {
                    "type": "number",
                    "example": 45.2
                },
                "request_id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                },
                "timestamp": {
                    "type": "string",
                    "example": "2025-09-17T14:30:00Z"
                }
            }
        },
        "server.QueueStatusResponse": {
            "type": "object",
            "properties": {
                "estimated_wait_time_minutes": {
                    "type": "integer",
                    "example": 2
                },
                "max_queue_size": {
                    "type": "integer",
                    "example": 1000
                },
                "queue_depth": {
                    "type": "integer",
                    "example": 5
                },
                "utilization_percent": {
                    "type": "number",
                    "example": 0.5
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "100.123.49.70:8199",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Dolphin Document Parser API",
	Description:      "A high-performance document parsing service with batch processing and intelligent queueing",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
